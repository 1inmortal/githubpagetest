#!/bin/bash

# Script para configurar secretos en GitHub Actions
# Autor: Sistema de Auditor√≠a de Seguridad
# Fecha: $(date)

echo "üîê Configurando secretos para GitHub Actions..."
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para verificar si gh CLI est√° instalado
check_gh_cli() {
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}‚ùå GitHub CLI (gh) no est√° instalado${NC}"
        echo -e "${YELLOW}üí° Instala GitHub CLI desde: https://cli.github.com/${NC}"
        exit 1
    fi
    
    # Verificar si est√° autenticado
    if ! gh auth status &> /dev/null; then
        echo -e "${RED}‚ùå No est√°s autenticado en GitHub CLI${NC}"
        echo -e "${YELLOW}üí° Ejecuta: gh auth login${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ GitHub CLI est√° instalado y autenticado${NC}"
}

# Funci√≥n para mostrar comandos de configuraci√≥n
show_setup_commands() {
    echo -e "${BLUE}üìã COMANDOS PARA CONFIGURAR SECRETOS:${NC}"
    echo ""
    
    echo -e "${YELLOW}üîß Secretos de Docker Hub:${NC}"
    echo "gh secret set DOCKER_USERNAME --body \"tu_docker_username\""
    echo "gh secret set DOCKER_PASSWORD --body \"tu_docker_password\""
    echo ""
    
    echo -e "${YELLOW}‚òÅÔ∏è  Secretos de Azure (nuevos nombres):${NC}"
    echo "gh secret set AZURE_CLIENT_ID --body \"tu_azure_client_id\""
    echo "gh secret set AZURE_TENANT_ID --body \"tu_azure_tenant_id\""
    echo "gh secret set AZURE_SUBSCRIPTION_ID --body \"tu_azure_subscription_id\""
    echo ""
    
    echo -e "${YELLOW}üóëÔ∏è  Comandos para eliminar secretos antiguos (despu√©s de verificar):${NC}"
    echo "gh secret delete AZUREAPPSERVICE_CLIENTID_50916B56A1E54F7E8A271114431680E9"
    echo "gh secret delete AZUREAPPSERVICE_TENANTID_640BE7320F1F4152843291CF35C38EA9"
    echo "gh secret delete AZUREAPPSERVICE_SUBSCRIPTIONID_E6CFEE2E249A45E59D4C0F467B441DBE"
    echo ""
}

# Funci√≥n para configurar secretos interactivamente
interactive_setup() {
    echo -e "${BLUE}ü§ñ CONFIGURACI√ìN INTERACTIVA DE SECRETOS${NC}"
    echo ""
    
    read -p "¬øDeseas configurar los secretos ahora? (s/n): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        echo -e "${YELLOW}üîß Configurando secretos de Docker Hub...${NC}"
        
        read -p "Docker Username: " docker_username
        if [ ! -z "$docker_username" ]; then
            gh secret set DOCKER_USERNAME --body "$docker_username"
            echo -e "${GREEN}‚úÖ DOCKER_USERNAME configurado${NC}"
        fi
        
        read -s -p "Docker Password: " docker_password
        echo ""
        if [ ! -z "$docker_password" ]; then
            gh secret set DOCKER_PASSWORD --body "$docker_password"
            echo -e "${GREEN}‚úÖ DOCKER_PASSWORD configurado${NC}"
        fi
        
        echo ""
        echo -e "${YELLOW}‚òÅÔ∏è  Configurando secretos de Azure...${NC}"
        
        read -p "Azure Client ID: " azure_client_id
        if [ ! -z "$azure_client_id" ]; then
            gh secret set AZURE_CLIENT_ID --body "$azure_client_id"
            echo -e "${GREEN}‚úÖ AZURE_CLIENT_ID configurado${NC}"
        fi
        
        read -p "Azure Tenant ID: " azure_tenant_id
        if [ ! -z "$azure_tenant_id" ]; then
            gh secret set AZURE_TENANT_ID --body "$azure_tenant_id"
            echo -e "${GREEN}‚úÖ AZURE_TENANT_ID configurado${NC}"
        fi
        
        read -p "Azure Subscription ID: " azure_subscription_id
        if [ ! -z "$azure_subscription_id" ]; then
            gh secret set AZURE_SUBSCRIPTION_ID --body "$azure_subscription_id"
            echo -e "${GREEN}‚úÖ AZURE_SUBSCRIPTION_ID configurado${NC}"
        fi
        
        echo ""
        echo -e "${GREEN}‚úÖ Todos los secretos configurados exitosamente${NC}"
    else
        echo -e "${YELLOW}‚ÑπÔ∏è  Configuraci√≥n manual requerida${NC}"
    fi
}

# Funci√≥n para verificar secretos existentes
check_existing_secrets() {
    echo -e "${BLUE}üîç VERIFICANDO SECRETOS EXISTENTES${NC}"
    echo ""
    
    # Listar secretos existentes
    if gh secret list &> /dev/null; then
        echo -e "${GREEN}‚úÖ Secretos existentes:${NC}"
        gh secret list
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No se pudieron listar los secretos existentes${NC}"
    fi
    echo ""
}

# Funci√≥n para mostrar resumen de workflows
show_workflow_summary() {
    echo -e "${BLUE}üìä RESUMEN DE WORKFLOWS Y SECRETOS${NC}"
    echo ""
    
    echo -e "${GREEN}‚úÖ Workflows sin problemas:${NC}"
    echo "  ‚Ä¢ secret-scan.yml (0 secretos)"
    echo "  ‚Ä¢ publish-ghcr.yml (GITHUB_TOKEN autom√°tico)"
    echo "  ‚Ä¢ codeql.yml (0 secretos)"
    echo ""
    
    echo -e "${YELLOW}‚ö†Ô∏è  Workflows que requieren secretos:${NC}"
    echo "  ‚Ä¢ main_webapp-inmortal.yml (Azure - 3 secretos)"
    echo "  ‚Ä¢ pull-image.yml (Docker Hub - 2 secretos)"
    echo "  ‚Ä¢ publish-image.yml (Docker Hub - 2 secretos)"
    echo ""
    
    echo -e "${RED}üö® Secretos problem√°ticos encontrados:${NC}"
    echo "  ‚Ä¢ AZUREAPPSERVICE_CLIENTID_50916B56A1E54F7E8A271114431680E9 (67 chars)"
    echo "  ‚Ä¢ AZUREAPPSERVICE_TENANTID_640BE7320F1F4152843291CF35C38EA9 (67 chars)"
    echo "  ‚Ä¢ AZUREAPPSERVICE_SUBSCRIPTIONID_E6CFEE2E249A45E59D4C0F467B441DBE (67 chars)"
    echo ""
}

# Funci√≥n para mostrar recomendaciones
show_recommendations() {
    echo -e "${BLUE}üõ°Ô∏è  RECOMENDACIONES DE SEGURIDAD${NC}"
    echo ""
    echo "1. üîÑ Rotaci√≥n regular: Cambia los secretos cada 90 d√≠as"
    echo "2. üîí Principio de m√≠nimo privilegio: Usa solo permisos necesarios"
    echo "3. üìã Auditor√≠a: Revisa regularmente qu√© workflows usan cada secreto"
    echo "4. üè∑Ô∏è  Nombres descriptivos: Usa nombres que indiquen claramente el prop√≥sito"
    echo "5. üåç Separaci√≥n de entornos: Usa diferentes secretos para dev/staging/prod"
    echo "6. üîç Monitoreo: Configura alertas para uso inusual de secretos"
    echo ""
}

# Funci√≥n principal
main() {
    echo "üîê ========================================="
    echo "   CONFIGURADOR DE SECRETOS GITHUB ACTIONS"
    echo "========================================="
    echo ""
    
    # Verificar GitHub CLI
    check_gh_cli
    
    # Mostrar resumen
    show_workflow_summary
    
    # Verificar secretos existentes
    check_existing_secrets
    
    # Mostrar comandos
    show_setup_commands
    
    # Configuraci√≥n interactiva
    interactive_setup
    
    # Mostrar recomendaciones
    show_recommendations
    
    echo -e "${GREEN}‚úÖ Configuraci√≥n completada${NC}"
    echo ""
    echo -e "${YELLOW}üí° Pr√≥ximos pasos:${NC}"
    echo "1. Verifica que todos los workflows se ejecuten correctamente"
    echo "2. Elimina los secretos antiguos despu√©s de confirmar que todo funciona"
    echo "3. Configura alertas de seguridad para monitoreo continuo"
    echo ""
}

# Ejecutar funci√≥n principal
main 