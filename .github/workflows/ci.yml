name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0' # Semanal los domingos a las 2 AM

env:
  NODE_VERSION: '20.x'
  NPM_VERSION: '10.x'

# Configuraci√≥n de concurrencia para evitar builds simult√°neos
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # An√°lisis de c√≥digo y linting
  lint:
    name: Lint y An√°lisis de C√≥digo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependencias
      run: |
        npm ci --ignore-scripts || npm install --ignore-scripts
        if [ -f "server/package.json" ]; then
          cd server && npm ci --ignore-scripts || npm install --ignore-scripts
        fi

    - name: Lint frontend
      run: npm run lint || echo "Lint fall√≥, continuando..."
      continue-on-error: true

    - name: Lint backend
      run: |
        if [ -f "server/package.json" ]; then
          cd server && npm run lint || echo "Lint del servidor fall√≥"
        fi
      continue-on-error: true

    - name: Verificar formato
      run: npm run format --check || echo "Formato fall√≥, continuando..."
      continue-on-error: true

  # Tests unitarios
  test-unit:
    name: Tests Unitarios
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependencias
      run: |
        npm ci --ignore-scripts || npm install --ignore-scripts
        if [ -f "server/package.json" ]; then
          cd server && npm ci --ignore-scripts || npm install --ignore-scripts
        fi

    - name: Ejecutar tests unitarios
      run: npm run test:unit || echo "Tests unitarios fallaron, continuando..."
      continue-on-error: true

    - name: Generar reporte de cobertura
      run: npm run test:coverage || echo "Cobertura fall√≥, continuando..."
      continue-on-error: true

    - name: Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Tests de API
  test-api:
    name: Tests de API
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependencias del servidor
      run: |
        if [ -f "server/package.json" ]; then
          cd server && npm ci --ignore-scripts || npm install --ignore-scripts
        fi

    - name: Setup SQLite
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3

    - name: Ejecutar migraciones de base de datos
      run: |
        if [ -f "server/package.json" ]; then
          cd server
          npm run db:migrate || echo "Migraciones fallaron"
          npm run db:seed || echo "Seed fall√≥"
        fi
      continue-on-error: true

    - name: Ejecutar tests de API
      run: |
        if [ -f "server/package.json" ]; then
          cd server && npm run test:api || echo "Tests de API fallaron"
        fi
      continue-on-error: true

  # Tests E2E
  test-e2e:
    name: Tests E2E
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependencias
      run: npm ci --ignore-scripts || npm install --ignore-scripts

    - name: Instalar Playwright browsers
      run: npx playwright install --with-deps

    - name: Ejecutar tests E2E
      run: npm run test:e2e || echo "Tests E2E fallaron, continuando..."
      continue-on-error: true

    - name: Subir reportes de Playwright
      uses: actions/upload-artifact@v5
      if: always()
      with:
        name: playwright-report
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Build y verificaci√≥n
  build:
    name: Build y Verificaci√≥n
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-api, test-e2e]
    permissions:
      contents: read
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependencias
      run: npm ci --ignore-scripts || npm install --ignore-scripts

    - name: Verificar build
      run: npm run build || echo "Build fall√≥, continuando..."
      continue-on-error: true

    - name: Verificar estructura del proyecto
      run: |
        # Verificar que los archivos cr√≠ticos existen
        test -f index.html || echo "index.html no encontrado"
        test -f src/core/store.js || echo "store.js no encontrado"
        test -f src/services/dataClient.js || echo "dataClient.js no encontrado"
        if [ -f "server/package.json" ]; then
          test -f server/src/index.js || echo "server index.js no encontrado"
          test -f server/prisma/schema.prisma || echo "schema.prisma no encontrado"
        fi
      continue-on-error: true

    - name: Verificar dependencias de seguridad
      run: npm audit --audit-level=moderate || echo "Audit fall√≥, continuando..."
      continue-on-error: true

  # Despliegue (solo en main)
  deploy:
    name: Despliegue
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependencias
      run: npm ci --ignore-scripts || npm install --ignore-scripts

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Build para Pages
      run: |
        # Crear directorio de build
        mkdir -p dist
        # Copiar archivos est√°ticos
        cp -r src/ dist/
        cp index.html dist/
        cp -r config/ dist/
        cp -r docs/ dist/
        cp README.md dist/
        cp LICENSE dist/

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Notificaciones
  notify:
    name: Notificaciones
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    permissions:
      contents: read
    
    steps:
    - name: Notificar estado del build
      run: |
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Build exitoso"
        else
          echo "‚ùå Build fall√≥"
          exit 1
        fi

    - name: Notificar despliegue
      if: needs.deploy.result == 'success'
      run: |
        echo "üöÄ Despliegue exitoso a GitHub Pages"
        echo "URL: https://1inmortal.github.io/githubpagetest/"
